# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import base_pb2 as base__pb2
import course_pb2 as course__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.69.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in course_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CourseServiceStub(object):
    """gRPC service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCourseById = channel.unary_unary(
                '/course.CourseService/GetCourseById',
                request_serializer=course__pb2.GetCourseRequest.SerializeToString,
                response_deserializer=course__pb2.Course.FromString,
                _registered_method=True)
        self.GetCoursesByInstructor = channel.unary_unary(
                '/course.CourseService/GetCoursesByInstructor',
                request_serializer=course__pb2.GetCoursesByInstructorRequest.SerializeToString,
                response_deserializer=course__pb2.GetAllCoursesResponse.FromString,
                _registered_method=True)
        self.GetAllCourses = channel.unary_unary(
                '/course.CourseService/GetAllCourses',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=course__pb2.GetAllCoursesResponse.FromString,
                _registered_method=True)
        self.CreateCourse = channel.unary_unary(
                '/course.CourseService/CreateCourse',
                request_serializer=course__pb2.Course.SerializeToString,
                response_deserializer=base__pb2.BaseResponse.FromString,
                _registered_method=True)
        self.UpdateCourse = channel.unary_unary(
                '/course.CourseService/UpdateCourse',
                request_serializer=course__pb2.Course.SerializeToString,
                response_deserializer=base__pb2.BaseResponse.FromString,
                _registered_method=True)
        self.DeleteCourse = channel.unary_unary(
                '/course.CourseService/DeleteCourse',
                request_serializer=base__pb2.IdRequest.SerializeToString,
                response_deserializer=base__pb2.BaseResponse.FromString,
                _registered_method=True)


class CourseServiceServicer(object):
    """gRPC service definition
    """

    def GetCourseById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCoursesByInstructor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllCourses(self, request, context):
        """New method
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCourse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCourse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCourse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CourseServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCourseById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCourseById,
                    request_deserializer=course__pb2.GetCourseRequest.FromString,
                    response_serializer=course__pb2.Course.SerializeToString,
            ),
            'GetCoursesByInstructor': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCoursesByInstructor,
                    request_deserializer=course__pb2.GetCoursesByInstructorRequest.FromString,
                    response_serializer=course__pb2.GetAllCoursesResponse.SerializeToString,
            ),
            'GetAllCourses': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllCourses,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=course__pb2.GetAllCoursesResponse.SerializeToString,
            ),
            'CreateCourse': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCourse,
                    request_deserializer=course__pb2.Course.FromString,
                    response_serializer=base__pb2.BaseResponse.SerializeToString,
            ),
            'UpdateCourse': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCourse,
                    request_deserializer=course__pb2.Course.FromString,
                    response_serializer=base__pb2.BaseResponse.SerializeToString,
            ),
            'DeleteCourse': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCourse,
                    request_deserializer=base__pb2.IdRequest.FromString,
                    response_serializer=base__pb2.BaseResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'course.CourseService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('course.CourseService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CourseService(object):
    """gRPC service definition
    """

    @staticmethod
    def GetCourseById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/GetCourseById',
            course__pb2.GetCourseRequest.SerializeToString,
            course__pb2.Course.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCoursesByInstructor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/GetCoursesByInstructor',
            course__pb2.GetCoursesByInstructorRequest.SerializeToString,
            course__pb2.GetAllCoursesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllCourses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/GetAllCourses',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            course__pb2.GetAllCoursesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateCourse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/CreateCourse',
            course__pb2.Course.SerializeToString,
            base__pb2.BaseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateCourse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/UpdateCourse',
            course__pb2.Course.SerializeToString,
            base__pb2.BaseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCourse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/course.CourseService/DeleteCourse',
            base__pb2.IdRequest.SerializeToString,
            base__pb2.BaseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
